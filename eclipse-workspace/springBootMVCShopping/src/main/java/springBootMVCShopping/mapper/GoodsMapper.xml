<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="springBootMVCShopping.mapper.GoodsMapper">
	<sql id="goodsColumns">
		GOODS_NUM, GOODS_PRICE, GOODS_CONTENTS, VISIT_COUNT, GOODS_UPDATE_DATE, 
		 EMP_NUM, GOODS_REGIST, UPDATE_EMP_NUM, GOODS_NAME, GOODS_MAIN_IMAGE,
		 GOODS_MAIN_STORE_IMAGE, GOODS_DETAIL_IMAGE, GOODS_DETAIL_STORE_IMAGE
	</sql>

	<insert id="goodsInsert">
		insert into goods(<include refid="goodsColumns"></include>)
		values(#{goodsNum}, #{goodsPrice}, #{goodsContents}, 0,
		sysdate, #{empNum}, sysdate, #{updateEmpNum}, #{goodsName}, 
		#{goodsMainImage}, 
		#{goodsMainStoreImage},
		<if test="goodsDetailImage != null"> 
		#{goodsDetailImage}, #{goodsDetailStoreImage})
		</if>
		<if test="goodsDetailImage == null"> 
		null, null)
		</if>
	</insert>
	
	<!-- MyBatis에서 DTO에 값을 넣어오는 것이 아닌, Setter를 이용해서 값을 가져오는 방법. -->
	<!-- idArg는 Primary Key를 적는 태그임!! / Arg는 그냥 다른 Column들을 적는 것. -->
	<!-- idArg에서 jdbcType은 DB의 타입, javaType은 java의 타입 -->
	<resultMap type="goodsDTO" id="goodsResultMap">
		<constructor>
			<idArg column = "goods_num" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_price" jdbcType="BIGINT" javaType = "integer"/>
			<arg column = "goods_contents" jdbcType="VARCHAR" javaType="String"/>
			<arg column="visit_count" jdbcType="BIGINT" javaType = "integer" />
			<arg column = "goods_update_date" jdbcType="DATE" javaType = "java.util.Date"/>
			<arg column = "emp_num" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_regist" jdbcType="DATE" javaType = "java.util.Date"/>
			<arg column = "update_emp_num" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_name" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_main_image" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_main_store_image" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_detail_image" jdbcType="VARCHAR" javaType="String"/>
			<arg column = "goods_detail_store_image" jdbcType="VARCHAR" javaType="String"/>
		</constructor>
	</resultMap>
	
	<select id="goodsSelectAll" resultMap = "goodsResultMap" parameterType="sepDTO">
		select * from
		(select row_number() over(order by goods_num) as rn, <include refid="goodsColumns"></include>
		from goods
		<where>
		goods_name like '%'||#{searchWord}||'%' or
		goods_num like '%'||#{searchWord}||'%' or
		goods_price like '%'||#{searchWord}||'%'
		</where>)
		where rn between #{startRow} and #{endRow}
	</select>
	
	<select id="goodsSelectOne" resultType="goodsDTO">
		select <include refid="goodsColumns"></include>
		from goods where goods_num = #{goodsNum}
	</select>
	
	<update id="goodsUpdate">
		update goods 
		<trim prefix="set" suffixOverrides=",">
			GOODS_PRICE = #{goodsPrice}, 
			GOODS_CONTENTS = #{goodsContents}, VISIT_COUNT = #{visitCount}, 
			GOODS_UPDATE_DATE = sysdate, EMP_NUM = #{empNum}, 
			GOODS_REGIST = #{goodsRegist}, 
			UPDATE_EMP_NUM = #{updateEmpNum}, GOODS_NAME = #{goodsName}
			<if test = "goodsMainImage != null">, goods_main_image = #{goodsMainImage}, goods_main_store_image = #{goodsMainStoreImage}</if>
			<if test = "goodsDetailImage != null">, goods_detail_image = #{goodsDetailImage}, goods_detail_store_image = #{goodsDetailStoreImage}</if>
			</trim>
			where goods_num = #{goodsNum}
		
	</update>
	
	<delete id="goodsDelete">
		delete from goods where goods_num in
		<foreach collection="#{goodsNums}" open="(" close=")" separator="," item="num" index="index">
		#{num}
		</foreach>
	</delete>
	<select id="goodsCount" resultType="int">
		select count(*) from goods
	</select>
	
	<select id="goodsSelectList" resultType = "goodsDTO">
		select <include refid="goodsColumns"></include>
		from goods
		<where>
			goods_num in 
			<foreach collection="goodsNums" index="index" item="goodsNum" open="(" close=")" separator=",">
			#{goodsNum}
			</foreach>
		</where>
	</select>
	
	<select id="goodsSelectList2" resultMap = "goodsResultMap">
		select * from
		(select rownum rn, <include refid="goodsColumns"></include> from goods)
		where rn between #{startRow} and #{endRow}
	</select>
</mapper>